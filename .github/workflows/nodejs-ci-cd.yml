name: Node.js CI/CD

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm-packages-cache
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  build:
    runs-on: ubuntu-latest
    needs: test # This ensures build job runs after the test job

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm-packages-cache
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ./dist
          compression-level: 9
          retention-days: 1
          overwrite: false

  deploy:
    runs-on: ubuntu-latest
    needs: build # This ensures deploy job runs after the build job

    steps:
      # - name: Checkout repository
      #   uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./dist

      - name: Verify Build Output
        run: ls -l ./dist

      - name: Deploy
        run: |
          echo "Deploying application..."
          # Add your deployment script or commands here
          # For example, if deploying to a server via SSH:
          # scp -r ./build user@server:/path/to/deploy

      # - name: Upload deployment artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: deployment-artifacts
      #     path: ./deploy
